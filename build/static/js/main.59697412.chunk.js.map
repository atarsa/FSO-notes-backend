{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisitng","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","import","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCI3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEtB,OAAgB,OAAZA,EACK,KAGP,yBAAKJ,UAAU,SACZI,I,gBCeQ,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,UAIRC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,SAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,SAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,sOCb3C,IAAMK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAsGSC,EAjGH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,KAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACNC,IAEGvB,MAAK,SAAAwB,GACJT,EAASS,QAEd,IAGH,IAAMC,EAAqB,SAAA3B,GACzB,IAAMb,EAAO6B,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,E,yVAAW,IAAQ3C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACUzB,EAAI8B,GACX5B,MAAK,SAAA6B,GACJd,EAASD,EAAMgB,KAAI,SAAA7C,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO4C,SAEpDE,OAAM,SAAAC,GACLX,EAAgB,aAAD,OACApC,EAAKK,QADL,sCAGf2C,sBAAW,WACTZ,EAAgB,QACf,KACHN,EAASD,EAAMoB,QAAO,SAAAP,GAAC,OAAIA,EAAE7B,KAAOA,UA4BpCqC,EAAcjB,EAClBJ,EACAA,EAAMoB,QAAO,SAAAjD,GAAI,OAAuB,IAAnBA,EAAKG,aAU3B,OACC,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAS2B,IACvB,6BACE,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAjBeiB,EAAYL,KAAI,SAAA7C,GAAI,OACrC,kBAAC,EAAD,CACEmD,IAAKnD,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBAAMuC,EAAmBxC,EAAKa,WAgBhD,0BAAMuC,SA9CM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAAS0B,EACTjB,MAAM,IAAI0C,MAAOC,cACjBC,OAAQC,KAAKC,SAAW,IAI1BtB,EACUiB,GACPxC,MAAK,SAAA6B,GACJd,EAASD,EAAMX,OAAO0B,IACtBZ,EAAW,SAkCX,2BACE6B,MAAO9B,EACP+B,SAhCiB,SAACT,GACxBU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB7B,EAAWqB,EAAMY,OAAOJ,UAgCpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC3GJC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.59697412.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important'\r\n    : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>  \r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n\r\n  if (message === null) {\r\n    return null\r\n  } \r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisitng = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisitng))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\r\n\r\nimport Note from './components/Note';\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\nimport { setTimeout } from 'timers';\r\n\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div> \r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState(' ')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  \r\n  useEffect(() => {\r\n      noteService\r\n        .getAll()\r\n        .then(initialNotes => {\r\n          setNotes(initialNotes)    \r\n        })\r\n  }, []) \r\n\r\n   \r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `the note '${note.content}' was already deleted from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  }\r\n\r\n  \r\n  \r\n  const addNote = event => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      import: Math.random() > 0.5,\r\n      \r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })   \r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll \r\n  ? notes\r\n  : notes.filter(note => note.important === true) \r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note \r\n      key={note.id} \r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  )\r\n\r\n   return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input \r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n         />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  )\n"],"sourceRoot":""}